import jsPDF from 'jspdf';

export const exportToPdf = (tripData) => {
  try {
    const pdf = new jsPDF();
    const margin = 20;
    const lineHeight = 10;
    let y = 30; // Starting y after header
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let pageNum = 1;

    // Header: Adds a title and a horizontal line.
    const addHeader = () => {
      pdf.setFontSize(18);
      pdf.setFont(undefined, 'bold');
      const headerText = "Tour It";
      const headerWidth = pdf.getStringUnitWidth(headerText) * pdf.getFontSize() / pdf.internal.scaleFactor;
      const x = (pageWidth - headerWidth) / 2;
      pdf.text(headerText, x, 15);
      // Draw a line under the header for that extra fancy touch
      pdf.setLineWidth(0.5);
      pdf.line(margin, 20, pageWidth - margin, 20);
    };

    // Footer: Displays a simple footer with page numbers.
    const addFooter = (pageNum) => {
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      const footerText = `Generated by TourIt Â© 2025  | Page ${pageNum}`;
      const footerWidth = pdf.getStringUnitWidth(footerText) * pdf.getFontSize() / pdf.internal.scaleFactor;
      const x = (pageWidth - footerWidth) / 2;
      pdf.text(footerText, x, pageHeight - 10);
    };

    // Helper: Centered text for titles and headers.
    const addCenteredText = (text, fontSize = 16, isBold = false) => {
      pdf.setFontSize(fontSize);
      pdf.setFont(undefined, isBold ? 'bold' : 'normal');
      const textWidth = pdf.getStringUnitWidth(text) * fontSize / pdf.internal.scaleFactor;
      const x = (pageWidth - textWidth) / 2;
      pdf.text(text, x, y);
      y += lineHeight;
    };

    // Helper: Left-aligned text with wrapping.
    const addText = (text, fontSize = 12, isBold = false) => {
      pdf.setFontSize(fontSize);
      pdf.setFont(undefined, isBold ? 'bold' : 'normal');
      const maxWidth = pageWidth - (2 * margin);
      const splitText = pdf.splitTextToSize(text, maxWidth);
      pdf.text(splitText, margin, y);
      y += lineHeight * splitText.length;
    };

    // Check for page break and add header/footer if needed.
    const checkPageBreak = () => {
      if (y > pageHeight - margin - 20) {
        addFooter(pageNum);
        pdf.addPage();
        pageNum++;
        addHeader();
        y = 30; // Reset y after header
      }
    };

    // Begin document with header
    addHeader();

    // Document Title
    y += 10;
    addCenteredText(`Trip to ${tripData.location}`, 22, true);
    y += 5;

    // Trip Details Section
    checkPageBreak();
    addText(`Duration: ${tripData.duration}`, 14);
    addText(`Budget: ${tripData.budget}`, 14);
    addText(`Travelers: ${tripData.travelers}`, 14);
    y += 8;

    // Recommended Hotels Section
    checkPageBreak();
    addCenteredText('Recommended Hotels:', 18, true);
    y += 5;
    tripData.hotels.forEach((hotel) => {
      checkPageBreak();
      addText(`${hotel.hotelName}`, 14, true);
      addText(`Address: ${hotel.hotelAddress}`);
      addText(`Price: ${hotel.price}`);
      addText(`Rating: ${hotel.rating}`);
      addText(`${hotel.description}`);
      y += 2;
    });

    // Itinerary Section
    y += 5;
    checkPageBreak();
    addCenteredText('Itinerary:', 18, true);
    y += 5;
    Object.entries(tripData.itinerary).forEach(([day, activity]) => {
      checkPageBreak();
      addText(`${day.charAt(0).toUpperCase()}${day.slice(1)}`, 14, true);
      addText(`Theme: ${activity.theme}`);
      addText(`Best Time to Visit: ${activity.bestTimeToVisit}`);
      y += 5;

      activity.places.forEach((place) => {
        checkPageBreak();
        addText(`${place.placeName}`, 12, true);
        addText(`Details: ${place.placeDetails}`);
        addText(`Ticket Pricing: ${place.ticketPricing}`);
        addText(`Time to Travel: ${place.timeToTravel}`);
        y += 5;
      });
      y += 5;
    });

    // Final Footer on the last page
    checkPageBreak();
    addFooter(pageNum);

    // Save the PDF
    pdf.save(`${tripData.location}_trip_plan.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
  }
};
